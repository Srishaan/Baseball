[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploratory Data Analysis and Visualization of Trends and Biases in MLB Draft Decisions",
    "section": "",
    "text": "1 Introduction\nBaseball, known as America’s favorite pastime, is a sport filled with history, statistics, and tactics. The abundance of data collected over decades provides a rich foundation of analyzing the underlying trends present within this sport. Within this research, we will focus on finding key patterns and biases in baseball drafting using exploratory data analysis and visualization. By examining the various factors involved in player background and performance, we aim to better understand how such factors influence decisions in the MLB draft.\nTo achieve this goal, we utilize the BaseballR package in R and the pybaseball package in Python, both of which are thorough tools for retrieving both past and present baseball information to discover trends that could impact the selection of players in the MLB draft. These resources allow us to explore trends related to many factors, which incldue player position, age, background (college vs. high school), draft placement, and performance metrics. By conducting a thorough exploratory data analysis, we aim to identify patterns, anomalies, and potential biases in how players are scouted and drafted.\nThrough studying draft biases, our goal is to determine if specific player traits are given too much or too little importance during the drafting process and to shed light on how drafting decisions have evolved. This analysis offers valuable insights into scouting, drafting, and player development processes, helping to improve decision-making in a sport increasingly driven by analytics for a more precise and equitable evaluation of player potential.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nFor this project, there are four key data sources that will be utilized.\nThe first two datasets are obtained using the pybaseball package, a Python library (last updated on September 8, 2023 with updates every 1-2 months on average) that is provides access to various reputable baseball sources such as FanGraphs and Baseball Reference. By utilizing pybaseball’s implemented batting_stats() and pitching_stats() functions, we get the batting data and pitching statistics for MLB players, saved as “batting_stats.csv” and “pitching_stats.csv”, respectively. The batting statistics dataset has dimensions of 10,665 × 319, and the pitching statistics dataset has the dimensions of 6,423 × 392.\nThe last two datasets are sourced from BaseballR package, an R library (last updated on January 16, 2024 with updates every 2-3 months on average) designed for accessing and analyzing baseball data from other reputable sources such as Statcast (an analytics system used by the MLB to track baseball data) and Baseball Savant. Using the BaseballR package, we retrieve baseball draft data for each year from 1965 to 2023, which includes details about player drafts such as team, round, and selection year, saved as “draft_df.csv”. Additionally, we run the chadwick_player_lu() function from BaseballR to get a database of player biographical and career information from the Chadwick Baseball Bureau, which we save as “chadwick_data.csv”. The draft dataset has dimensions of 67903 x 84 and the Chadwick player dataset has dimensions of 512843 x 40.\nThe main issues/problems with the data is that there are missing values present, and an in-depth analysis about this will be provided in the missing value analysis section below.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\nWithin our data, we see a plethora of missing values from each of our data sets.\n\n\nCode\nlibrary(tidyverse)\nlibrary(baseballr)\nlibrary(ggplot2)\n\n\nWithin our batting statistics dataset, there are a large amount of missing values, where even some variables have the same amount of missing values as there are rows in the dataset. For variables that have this situation, it is due to that feature not being applicable for batters. For example, a variable tracking a specific pitch type (like UN% or FT%) will not have data since the data primarily focuses on batting. There are some variables that contain some missing variables, which may be due to data collection gaps or data source limitation. Other common statistics though, such as AB (At Bats), H (Hits), and RBI (Runs Batted In), are core metrics in baseball datasets and are therefore recorded in our dataset without missing values. Due to the large nature of this dataset where there are over 319 variables, a summary of missing values is included instead of a heatmap visually showing the missing values of each variable at each column. A count of how many columns contain missing values and how many do not is also shown for greater clarification on the significant amount of missing variables.\n\n\nCode\nbatting_stats &lt;- read_csv(\"batting_stats.csv\", show_col_types = FALSE)\n\nbatting_na_count = colSums(is.na(batting_stats)) |&gt;\n  sort(decreasing = TRUE)\nbatting_na_count[batting_na_count == 10665]\n\n\n  FT% (sc)   UN% (sc)   vFT (sc)  FT-X (sc)  FT-Z (sc)   wFT (sc) wFT/C (sc) \n     10665      10665      10665      10665      10665      10665      10665 \n       xBA       xSLG      xwOBA \n     10665      10665      10665 \n\n\nCode\nbatting_na_count[batting_na_count == 0]\n\n\n   IDfg    Name    Team     Age       G      AB      PA       H      1B      2B \n      0       0       0       0       0       0       0       0       0       0 \n     3B      HR       R     RBI      BB     IBB      SO     HBP      SF      SH \n      0       0       0       0       0       0       0       0       0       0 \n    GDP      SB      CS     AVG     BB%      K%    BB/K     OBP     SLG     OPS \n      0       0       0       0       0       0       0       0       0       0 \n    ISO   BABIP    wOBA    wRAA     wRC     Bat     Rep     Pos     RAR     WAR \n      0       0       0       0       0       0       0       0       0       0 \n    Spd     BsR     Def     wSB Age Rng     Off      Lg  Events   L-WAR \n      0       0       0       0       0       0       0       0       0 \n\n\nCode\ncolumns_with_na_batting &lt;- sum(colSums(is.na(batting_stats)) &gt; 0)\ncolumns_without_na_batting &lt;- sum(colSums(is.na(batting_stats)) == 0)\ncat(\"Batting Columns with NA values:\", columns_with_na_batting, \"\\n\")\n\n\nBatting Columns with NA values: 270 \n\n\nCode\ncat(\"Batting Columns without NA values:\", columns_without_na_batting, \"\\n\")\n\n\nBatting Columns without NA values: 49 \n\n\nWithin our pitching statistics dataset, there are also a large amount of missing values, though there are not as many variables nor observations as that of the batting dataset. Again, some variables contain have the same amount of missing values as there are rows in the dataset. For variables that have this situation, it is due to that feature not being applicable for pitchers. For example, a variable tracking advanced metrics such as Stf+ FO (Stuff+ for Four-Seam Fastballs) or Loc+ FO (Location+ for Four-Seam Fastballs) will not have data since these variables require specific conditions or a sufficient sample size of pitches to calculate, making them inapplicable to all pitchers. There are some variables that contain some missing values, which may be due to data collection gaps or data source limitations. Other common statistics, such as W (Wins), L (Losses), and ERA (Earned Run Average), are core metrics in baseball datasets and are therefore recorded in our dataset without missing values. Due to the large nature of this dataset where there are over 392 variables, a summary of missing values is included instead of a heatmap visually showing the missing values of each variable at each column. A count of how many columns contain missing values and how many do not is also shown for greater clarification on the significant amount of missing variables.\n\n\nCode\npitching_stats &lt;- read_csv(\"pitching_stats.csv\", show_col_types = FALSE)\n\npitching_na_count = colSums(is.na(pitching_stats)) |&gt;\n  sort(decreasing = TRUE)\npitching_na_count[pitching_na_count == 6423]\n\n\n  FT% (sc)   FO% (sc)   UN% (sc)   vFT (sc)   vFO (sc)  FT-X (sc)  FO-X (sc) \n      6423       6423       6423       6423       6423       6423       6423 \n FT-Z (sc)  FO-Z (sc)   wFT (sc)   wFO (sc) wFT/C (sc) wFO/C (sc)       xERA \n      6423       6423       6423       6423       6423       6423       6423 \n   Stf+ FO    Loc+ FO    Pit+ FO \n      6423       6423       6423 \n\n\nCode\npitching_na_count[pitching_na_count == 0]\n\n\n    IDfg     Name     Team      Age        W        L      ERA      WAR \n       0        0        0        0        0        0        0        0 \n       G       GS       CG      ShO       SV       IP      TBF        H \n       0        0        0        0        0        0        0        0 \n       R       ER       HR       BB      IBB      HBP       WP       BK \n       0        0        0        0        0        0        0        0 \n      SO      K/9     BB/9     K/BB      H/9     HR/9      AVG     WHIP \n       0        0        0        0        0        0        0        0 \n   BABIP     LOB%      FIP      RAR     ERA-     FIP-       K%      BB% \n       0        0        0        0        0        0        0        0 \n     E-F  RA9-WAR BIP-Wins LOB-Wins FDP-Wins  Age Rng    K-BB%   Events \n       0        0        0        0        0        0        0        0 \n\n\nCode\ncolumns_with_na_pitching &lt;- sum(colSums(is.na(pitching_stats)) &gt; 0)\ncolumns_without_na_pitching &lt;- sum(colSums(is.na(pitching_stats)) == 0)\ncat(\"Pitching Columns with NA values:\", columns_with_na_pitching, \"\\n\")\n\n\nPitching Columns with NA values: 344 \n\n\nCode\ncat(\"Pitching Columns without NA values:\", columns_without_na_pitching, \"\\n\")\n\n\nPitching Columns without NA values: 48 \n\n\nMissing values are also present within the Chadwick data, which contains the biographical and career information of people associated with the MLB. Some columns are seen to be entirely misisng given that they are shown as solid red bars, which suggests that these variables are either not relevant to the dataset’s context or represent data that was not collected. Other columns have a mix of missing and non-missing values, which means that these variables may suffer from data collection gaps or were conditionally applicable, such as metrics that may applicable to baseball managers or metrics that were unavailable for certain time periods. Lastly, columns with no missing values as seen with white bars represent essential metrics such as a person’s name and position in the MLB. These metrics are recorded across the Chadwick dataset which shows that despite it having missing data present, its key metrics still are reliably available for analysis.\n\n\nCode\nchadwick_data &lt;- read_csv(\"chadwick_data.csv\", show_col_types = FALSE)\n\nchadwick_data_uniform &lt;- chadwick_data |&gt;\n  mutate(across(everything(), as.character))\n\nmissing_chadwick &lt;- chadwick_data_uniform |&gt;\n  mutate(row_id = row_number()) |&gt;\n  pivot_longer(-row_id, names_to = \"variable\", values_to = \"value\") |&gt;\n  mutate(missing = is.na(value))\n\nggplot(missing_chadwick, aes(x = variable, y = row_id, fill = missing)) +\n  geom_tile() +\n  scale_fill_manual(values = c(\"FALSE\" = \"white\", \"TRUE\" = \"red\"), name = \"Missing\") +\n  theme_minimal() +\n  labs(\n    title = \"Heatmap of Missing Values in Chadwick Data\",\n    x = \"Variables\",\n    y = \"Rows\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nLastly, missing values were also present within the draft data containing the team, round, and selection year of a player. To visualize the missing values in this dataset, I selected the top 20 variables with the most missing values and the top 20 with the least missing values. This was done due to there being a large amount of variables present in the dataset, though it was not as extensive as those in the batting and pitching datasets. Some columns are seen to be entirely misisng given that they are shown as solid red bars, which suggests that they might not be applicable to the dataset’s context, such as fields related to specific player demographics or draft-related outcomes that were not recorded. Other columns have a mix of missing and non-missing values, which means that these variables may suffer from data collection gaps or were attributes relevant only to certain players, teams, or draft rounds. Lastly, columns with no missing values as seen with white bars represent essential metrics such as a player’s name, their draft pick numbers, or other key metrics that are consistently recorded. These metrics are recorded throughout the draft dataset, which still demonstrates that while missing data is also present in this dataset, the key metrics in this dataset also still remain reliably available for analysis.\n\n\nCode\ndraft_data &lt;- read_csv(\"draft_data.csv\", show_col_types = FALSE)\n\ntop_missing_vars_draft &lt;- draft_data |&gt;\n  summarise(across(everything(), ~ sum(is.na(.)))) |&gt;\n  pivot_longer(everything(), names_to = \"variable\", values_to = \"missing_count\") |&gt;\n  arrange(desc(missing_count)) |&gt;\n  slice(1:20) |&gt;\n  pull(variable)\n\nleast_missing_vars_draft&lt;- draft_data |&gt;\n  summarise(across(everything(), ~ sum(is.na(.)))) |&gt;\n  pivot_longer(everything(), names_to = \"variable\", values_to = \"missing_count\") |&gt;\n  arrange(missing_count) |&gt;\n  slice(1:20) |&gt;\n  pull(variable)\n\ndraft_subset &lt;- draft_data |&gt;\n  select(all_of(c(top_missing_vars_draft, least_missing_vars_draft)))\n\ndraft_data_uniform &lt;- draft_subset |&gt;\n  mutate(across(everything(), as.character))\n\nmissing_draft &lt;- draft_data_uniform |&gt;\n  mutate(row_id = row_number()) |&gt;\n  pivot_longer(-row_id, names_to = \"variable\", values_to = \"value\") |&gt;\n  mutate(missing = is.na(value))\n\nggplot(missing_draft, aes(x = variable, y = row_id, fill = missing)) +\n  geom_tile() +\n  scale_fill_manual(values = c(\"FALSE\" = \"white\", \"TRUE\" = \"red\"), name = \"Missing\") +\n  theme_minimal() +\n  labs(\n    title = \"Heatmap of Missing Values in Draft Data\",\n    x = \"Variables\",\n    y = \"Rows\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_blank()\n  )",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#cleaning",
    "href": "data.html#cleaning",
    "title": "2  Data",
    "section": "2.3 Cleaning",
    "text": "2.3 Cleaning\nTo address the missing values in our datasets, we have performed data cleaning. By combining the draft data and the Chadwick data, we now have a comprehensive dataset that includes a player’s draft information as well as their biological and career details. Unnecessary variables have been removed to reduce the overall presence of missing values, while retaining valuable information such as a player’s draft round and height. Consistency has been ensured in both datasets regarding the formatting of variables like height and place of origin, facilitating a smooth merging process. New columns were created to represent the year of a player’s MLB debut and the year they last played, player height was converted into total inches, and state abbreviations in school names were extracted and corrected.\n\n\nCode\nlibrary(data.table)\nlibrary(datasets) # for state abbreviations\n\ndraft_info &lt;- fread('draft_data.csv')\n\ndraft_info &lt;-\n  draft_info |&gt; \n  # Add year columns to match up with Chadwick\n  mutate(mlb_played_first = year(person_mlb_debut_date),\n         high_school = ifelse(str_detect(school_name, \"\\\\sHS\") == TRUE, \"Yes\", \n                              \"No\"),\n         person_height = str_replace_all(person_height, \"\\\"$\", \"\")) |&gt; \n  replace_na(list(home_state = \"None\", mlb_played_first = 0)) |&gt; \n  mutate(mlb_played_last = ifelse(mlb_played_first == 0, 0, \n                           year(person_last_played_date))) |&gt; \n  replace_na(list(mlb_played_last = 2023)) |&gt; \n  # Remove variables of no interest\n  select(-person_link, -c(person_use_name:person_gender),\n         -c(person_name_slug:person_init_last_name), \n         -c(person_name_matrilineal:home_city), -c(home_country, school_state),\n         -c(person_xref_ids:person_death_country), -person_name_title, -team_id,\n         -person_name_suffix, -c(team_link:team_spring_league_abbreviation), \n         -headshot_link, home_state)\n\nchadwick &lt;- fread('chadwick_data.csv')\n\n# Update Chadwick for players who were drafted after\nchadwick &lt;- \n  chadwick |&gt; \n  select(-c(pro_managed_first:mlb_umpired_last), -name_suffix, \n         -name_matrilineal, -key_person, -key_uuid, -key_retro, \n         -key_bbref_minors, -c(key_npb:key_wikidata), -key_bbref) |&gt; \n  # Add variables to match up with Draft info\n  mutate(person_birth_date = \n          str_c(birth_year, birth_month, birth_day, \n                 sep=\"-\"),\n         person_full_fml_name = \n           str_c(name_given, name_last, sep = \" \"),\n         person_full_name = \n           str_c(name_first, name_last, sep = \" \")) |&gt; \n  rename(person_id = key_mlbam,\n         fg_playerID = key_fangraphs) |&gt; \n  arrange(mlb_played_first) |&gt; \n  drop_na(person_id) # Remove players we don't have an identifier for\n\n# missing height is formatted as 0' 0\" (0 feet 0 inches tall)\nmissing_height &lt;- draft_info$person_height[57]\n\ndraft_info &lt;- \n  draft_info |&gt; \n  # add the chadwick player info, particularly the `fg_playerID`\n  inner_join(chadwick |&gt; \n               select(-person_full_name, -person_birth_date, -person_full_fml_name,\n                      -mlb_played_first, -mlb_played_last), \n             by = \"person_id\") |&gt; \n  # Remove unnecessary variables\n  select(-person_first_name, -person_last_name, -person_primary_number, \n         -person_current_age, -c(person_name_first_last:person_strike_zone_bottom),\n         person_primary_position_code, person_primary_position_type, \n         person_bat_side_description, person_pitch_hand_description, -name_last,\n         -name_first) |&gt; \n  filter(person_height != missing_height)\nrm(chadwick)\n\n# Get the indices for the elements which contain a state abbreviation\ndraft_index &lt;- which(str_detect(draft_info$school_name, pattern = \"\\\\((.*?)\\\\)\"))\n\n# List with all the match results for the pattern \"(letters)\"\ndraft_list &lt;- str_match_all(draft_info$school_name, pattern = \"\\\\((.*?)\\\\)\")\n\n# Extracts the text within the \"()\", and stores it as a vector\ndraft_states &lt;- unlist(lapply(draft_list, function(x) {x[, 2]}))\nrm(draft_list) # Remove the list form of the home states\n\n# Removes any results where there was an NA result generated\ndraft_states &lt;- draft_states[!is.na(draft_states)]\n\n# Get the index for the draft_stats which contain the pattern \", \"\ncomma_index &lt;- which(str_detect(draft_states, \",\\\\s\"))\n\n# Extracts the states with the pattern \", \" from `draft_states`\ncomma_states &lt;- draft_states[comma_index]\n\n# Determines if there are any incorrect patterns\nwrong &lt;- comma_states[which(!str_detect(comma_states, \", ([:alpha:]+)\"))]\n\n# Replaces the pattern within the `comma_states` manually\ncomma_states[which(!str_detect(comma_states, \", ([:alpha:]+)\"))] &lt;- \", FL\"\n\n# Extract the letters which follow the \", \" pattern into a vector\ncomma_states &lt;- \n  str_match_all(comma_states, \", ([:alpha:]+)\") |&gt; \n  lapply(function(x) {x[, 2]})\n\n# There was an error, so it was detecting Louis and MO\ncomma_states[[2525]] &lt;- comma_states[[2525]][2]\n# Unlist it into a single vector\ncomma_states &lt;- comma_states |&gt; unlist()\n\n# Replace the comma states with the correct abbreviations\ndraft_states[comma_index] &lt;- comma_states\n\n# Create a new variable home_state\ndraft_info &lt;- draft_info |&gt; mutate(home_state = person_birth_state_province)\n\n# Store all the draft_states to the new `draft_state` variable within `draft_info`\ndraft_info$home_state[draft_index] &lt;- draft_states\nrm(draft_index, draft_states, wrong)\n\n# Wrong abbreviations indices\nwrong_index &lt;- which(nchar(draft_info$home_state) &gt; 2)\n\n# Find the wrong abbreviations\nwrong_abbrev &lt;- draft_info$home_state[wrong_index]\n\nstate_data &lt;- data.frame(state_name = state.name, state_abb = state.abb)\n\nstate_names_wrong &lt;- \n  data.frame(state_name = wrong_abbrev[which(tolower(wrong_abbrev) %in% tolower(state.name))]) |&gt; \n  inner_join(state_data, by = \"state_name\")\n\n# Fix the wrong abbreviations\nwrong_abbrev[which(tolower(wrong_abbrev) %in% tolower(state.name))] &lt;- state_names_wrong$state_abb\n\n# For those players who didn't go to high school\nno_hs &lt;- draft_info |&gt; \n  slice(wrong_index) |&gt; \n  filter(high_school == \"No\")\n\n# Improperly formatted states\nwrong_states &lt;- \n  wrong_abbrev[which(!(tolower(wrong_abbrev) %in% tolower(no_hs$home_state)))]\n\n# Find the unique improperly formatted states\nwrong &lt;- unique(wrong_states) |&gt; sort()\n\ncorrect_states &lt;- c(\"FL\", \"AL\", \"ALB\", \"AZ\", \"AZ\", \"AR\", \"GA\", \"MD\", \"MI\", \"AL\", \n                    \"CA\", \"CA\", \"CA\", \"CA\", \"Canada\", \"Canada\", \"IL\", \n                    \"Christian Brothers\", \"OH\", \"OH\", \"Coahuila\", \"CO\", \"CT\", \"CA\", \"CA\",\n                    \"DE\", \"CO\", \"FL\", \"FL\", \"FL\", \"FL\", \"FL\", \"CA\", \"HI\", \"Holland\", \"FL\",\n                    \"HI\", \"TX\", \"IA\", \"IL\", \"IL\", \"IL\", \"IL\", \"IN\", \"IN\", \"IA\",\n                    \"KS\", \"CA\", \"LA\", \"IA\", \"MA\", \"FL\", \"FL\", \"MI\", \"MI\",\n                    \"MI\", \"MN\", \"MS\", \"CA\", \"NC\", \"NE\", \"NJ\", \"NJ\", \"NY\",\n                    \"NY\", \"OH\", \"OK\", \"OK\", \"OK\", \"OR\", \"PA\", \"PA\", \"PA\", \"PA\", \n                    \"PA\", \"CA\", \"PA\", \"PA\", \"QUE\", \"QUE\", \"S. Australia\", \n                    \"TX\", \"CA\", \"CA\", \"SASK\", \"St Thomas\", \"CA\", \"TN\", \"TX\", \n                    \"Trabuco Hills\", \"Trinity International\", \"TX\", \"TX\", \n                    \"US Virgin Islands\", \"Ven\", \"WA\", \"OH\", \"WV\", \"Zacatecas\")\n\n# Corrected abbreviations\ncorrections &lt;- data.frame(wrong = wrong, correct = correct_states)\n\n# Correct the wrong_states abbreviations with the correct ones, unless not in U.S.A.\nwrong_states &lt;- ifelse(wrong_states %in% corrections$wrong, corrections$correct, wrong_states)\n\n# Update wrong_abbrev object with corrected abbreviations\nwrong_abbrev[which(!(tolower(wrong_abbrev) %in% tolower(no_hs$home_state)))] &lt;- wrong_states\n\n# Correct leftover wrong_abbrev\ncorrect_abbrev &lt;- ifelse(wrong_abbrev %in% corrections$wrong, corrections$correct, wrong_abbrev)\n\n# Add the correct_abbrev to the draft_info\ndraft_info$home_state[wrong_index] &lt;- correct_abbrev\ndraft_info$home_state &lt;- tolower(draft_info$home_state) \n\n# Create a list with all drafted player height\nheight_list &lt;- str_match_all(draft_info$person_height, \"\\\\d+\")\n\n# Convert the first element from feet to inches\nheight_ft &lt;- as.integer(unlist(lapply(height_list, function(x) {x[1]}))) * 12\nheight_in &lt;- as.integer(unlist(lapply(height_list, function(x) {x[2]}))) + as.integer(height_ft)\nrm(height_list, height_ft) # Remove the height_list\n\n# Convert the person_height variable to inches\ndraft_info$person_height &lt;- height_in\n\nrm(comma_index, comma_states, correct_abbrev, correct_states, height_in,\n   missing_height, wrong, wrong_abbrev, wrong_index, wrong_states, state_data,\n   state_names_wrong, no_hs, corrections)\n\n# write_csv(draft_info, 'clean_draft.csv')\n\n\nUpon analyzing the cleaned draft data, some variables, such as a player’s death date and nickname, still contain missing values. This is expected, as many players are still alive and may not have nicknames. However, columns containing essential information, such as a player’s draft pick details and biological attributes, are complete, reflecting data that is uniformly available for all baseball draftees. Overall, the cleaned dataset includes 26 variables with at least one missing value and 27 variables without any missing values. This represents a significant improvement compared to the initial analysis of the draft and Chadwick datasets.\n\n\nCode\ncleaned_draft_na_count &lt;- colSums(is.na(draft_info)) |&gt;\n  sort(decreasing = TRUE) \ncleaned_draft_na_count[cleaned_draft_na_count &gt; 30000]\n\n\n              death_day              death_year             death_month \n                  47979                   47978                   47978 \n       person_nick_name person_last_played_date             fg_playerID \n                  46823                   40962                   38857 \n  person_mlb_debut_date        col_played_first         col_played_last \n                  38656                   31351                   31351 \n\n\nCode\ncleaned_draft_na_count[cleaned_draft_na_count == 0][0:10]\n\n\n         pick_round         pick_number display_pick_number   round_pick_number \n                  0                   0                   0                   0 \n         is_drafted             is_pass                year           person_id \n                  0                   0                   0                   0 \n   person_full_name       person_height \n                  0                   0 \n\n\nCode\ncolumns_with_na_draft &lt;- sum(colSums(is.na(draft_info)) &gt; 0)\ncolumns_without_na_draft &lt;- sum(colSums(is.na(draft_info)) == 0)\ncat(\"Cleaned Draft Data Columns with NA values:\", columns_with_na_draft)\n\n\nCleaned Draft Data Columns with NA values: 26\n\n\nCode\ncat(\"Cleaned Draft Data Columns without NA values:\", columns_without_na_draft)\n\n\nCleaned Draft Data Columns without NA values: 27\n\n\nWhile missing values are still present in the cleaned dataset, the prevalence of solid red bars in the heatmap has significantly decreased. Of the 53 columns in the dataset, only a few show a substantial presence of missing values. A large majority of the columns are nearly complete or are fully complete, with no noticeable missing values observed in the heatmap. This indicates a significant improvement in data quality, enhancing the reliability of subsequent analyses.\n\n\nCode\ndraft_info_uniform &lt;- draft_info |&gt;\n  mutate(across(everything(), as.character))\n\nmissing_draft_info &lt;- draft_info_uniform |&gt;\n  mutate(row_id = row_number()) |&gt; \n  pivot_longer(-row_id, names_to = \"variable\", values_to = \"value\") |&gt; \n  mutate(missing = is.na(value)) \n\nggplot(missing_draft_info, aes(x = variable, y = row_id, fill = missing)) +\n  geom_tile() +\n  scale_fill_manual(values = c(\"FALSE\" = \"white\", \"TRUE\" = \"red\"), name = \"Missing\") +\n  theme_minimal() +\n  labs(\n    title = \"Heatmap of Missing Values in Cleaned Draft Data\",\n    x = \"Variables\",\n    y = \"Rows\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nWe will now create subsets of the batting and pitching data to use for our analysis. First, we will filter the columns to include only those with less than 50% missing values and remove any unnecessary variables. Next, we will create two datasets containing the complete draft information for batters and pitchers, saving them as “batters_full_draft.csv” and “pitchers_full_draft.csv.” From these full datasets, we will create subsets containing each player’s best draft pick, naming these files “batters_draft_stats.csv” and “pitchers_draft_stats.csv.” Further, we will create additional subsets of “batters_draft_stats.csv” and “pitchers_draft_stats.csv,” selecting only the variables relevant to our analysis, and save them as “batters_stats_subset.csv” and “pitchers_stats_subset.csv.” Lastly, subsets of “batters_full_draft.csv” and “pitchers_full_draft.csv” will be created, focusing on the variables needed for analysis, and these will be named “batters_draft_subset.csv” and “pitchers_draft_subset.csv.” These four subsets will serve as the foundation for our analysis, with the final two specifically being filtered by filtered by the player’s most recent draft year rather than their best draft pick in our analysis.\n\n\nCode\nbatting &lt;- fread('batting_stats.csv')\npitching &lt;- fread('pitching_stats.csv')\n\n# Change the variable name for WAR so that it matches in both data frames\nbatting &lt;- \n  batting |&gt; \n  rename(fWAR = `L-WAR`,\n         fg_playerID = IDfg)\n\npitching &lt;-\n  pitching |&gt; \n  rename(fWAR = WAR,\n         fg_playerID = IDfg)\n\n# Subset the columns which have less than 50% of values as NA values\nbat_columns &lt;- \n  which(batting[, lapply(.SD, function(x) {sum(is.na(x)) / length(x)})] &lt;= 0.5)\n\n# Keep columns of interest for all players in the data\nbatting &lt;-\n  batting |&gt; \n  select(all_of(bat_columns), -Events, -Dol, -starts_with(\"GB\"),\n         -starts_with(\"LD\"), -starts_with(\"FB\"), -c(Pitches:BUH), \n         -c(`IFFB%`:`BUH%`), -Age, -Team, -IFFB)\n\n# Subset the columns which have less than 50% of values as NA values\npitch_columns &lt;- \n  which(pitching[, lapply(.SD, function(x) {sum(is.na(x)) / length(x)})] &lt;= 0.5)\n\n# Keep only columns of interest for all players in the data\npitching &lt;-\n  pitching |&gt; \n  select(all_of(pitch_columns), -Team, -Age, -c(GB:BUH), -c(`GB/FB`:xFIP),\n         -c(`-WPA`:`WPA/LI`), -c(`FB% 2`:`SwStr%`), -SD, -MD, -SIERA, -`RS/9`, \n         -c(`O-Swing% (sc)`:`FDP-Wins`), -c(`Pull%`:`Hard%`), \n         -c(`O-Swing% (pi)`:`Pace (pi)`), -c(`LD%+`:`CSW%`), -`xFIP-`) |&gt; \n  replace_na(list(BS = 0, HLD = 0))\n\nrm(bat_columns, pitch_columns)\n\n# Draft info for the batters\n## Separate from the stats because some players are drafted into the MLB multiple times.\nbat_draft &lt;- \n  batting |&gt; \n  inner_join(draft_info, by = \"fg_playerID\") |&gt; \n  filter(person_primary_position_name != \"Pitcher\")\n\nrm(batting) \n\n# Career Stats for each batter from the draft information\nbat_stats &lt;- \n  bat_draft |&gt;\n  # For picks whose rounds are none numerical we will designate them with a 1000\n  # to ensure it's clear that it was a supplemental draft round\n  mutate(pick_round = ifelse(is.na(as.numeric(pick_round)), 1000, \n                             as.numeric(pick_round))) |&gt; \n  group_by(person_id) |&gt; \n  slice(which.min(pick_round)) |&gt; # choose the lower round (the better pick)\n  ungroup() |&gt; \n  distinct(person_id, .keep_all = T) |&gt;\n  arrange(desc(fWAR))\n\n# Removes players who do not have a person_birth_state_province\nbat_stats &lt;-\n  bat_stats |&gt; \n  drop_na(home_state)\n\n# Select those with abbreviations with 2 letters\nbat_stats &lt;- \n  bat_stats |&gt; \n  filter(home_state %in% tolower(state.abb))\n\n# Full Draft information for pitcher's\npitch_draft &lt;- \n  pitching |&gt; \n  inner_join(draft_info, by = \"fg_playerID\") |&gt; \n  filter(person_primary_position_name == \"Pitcher\")\n\nrm(pitching)\n\n# Career Stats for each pitcher from the draft information\npitch_stats &lt;- \n  pitch_draft |&gt; \n  # For picks whose rounds are none numerical we will designate them with a 1000\n  # to ensure it's clear that it was a supplemental draft round\n  mutate(pick_round = ifelse(is.na(as.numeric(pick_round)), 1000, \n                             as.numeric(pick_round))) |&gt; \n  group_by(person_id) |&gt; \n  slice(which.min(pick_round)) |&gt; # choose the lower round (the better pick)\n  ungroup() |&gt; \n  distinct(person_id, .keep_all = T) |&gt; \n  arrange(desc(fWAR))\n\n# Removes players who do not have a person_birth_state_province\npitch_stats &lt;-\n  pitch_stats |&gt; \n  drop_na(home_state)\n\n# Select only those with abbreviations with 2 letters\npitch_stats &lt;- \n  pitch_stats |&gt;  \n  # Remove abbreviations \n  filter(home_state %in% tolower(state.abb))\n\n# write_csv(bat_draft, 'batters_full_draft.csv')\n# write_csv(bat_stats, 'batters_draft_stats.csv')\n# write_csv(pitch_draft, 'pitchers_full_draft.csv')\n# write_csv(pitch_stats, 'pitchers_draft_stats.csv')\n# write_csv(bat_stats |&gt; select(fg_playerID, person_id, person_full_name, fWAR, pick_round,\n#                                pick_number, year, person_birth_state_province,\n#                                person_height, person_weight, home_state,\n#                                person_primary_position_abbreviation,\n#                                person_bat_side_code, person_pitch_hand_code,\n#                                mlb_played_first, mlb_played_last, high_school\n#                                ), 'bat_stats_subset.csv')\n# write_csv(pitch_stats |&gt; select(fg_playerID, person_id, person_full_name, fWAR, pick_round,\n#                                pick_number, year, person_birth_state_province,\n#                                person_height, person_weight, home_state,\n#                                person_primary_position_abbreviation,\n#                                person_bat_side_code, person_pitch_hand_code,\n#                                mlb_played_first, mlb_played_last, high_school\n#                                ), 'pitch_stats_subset.csv')\n# write_csv(bat_draft |&gt; select(fg_playerID, person_id, person_full_name, fWAR, pick_round,\n#                                pick_number, year, person_birth_state_province,\n#                                person_height, person_weight, home_state,\n#                                person_primary_position_abbreviation,\n#                                person_bat_side_code, person_pitch_hand_code,\n#                                mlb_played_first, mlb_played_last, high_school, birth_year\n#                                ), 'bat_draft_subset.csv')\n# write_csv(pitch_draft |&gt; select(fg_playerID, person_id, person_full_name, fWAR, pick_round,\n#                                pick_number, year, person_birth_state_province,\n#                                person_height, person_weight, home_state,\n#                                person_primary_position_abbreviation,\n#                                person_bat_side_code, person_pitch_hand_code,\n#                                mlb_played_first, mlb_played_last, high_school, birth_year\n#                                ), 'pitch_draft_subset.csv')\n\n\nWhen analyzing the heatmaps for the four data subsets that we will be analyzing, we see that there are virtually no missing values present given the minimal amount of red cells present in the heatmaps. In fact, missing values are generally sparse and concentrated in specific variable(s) rather than being evenly distributed. In the all four data subsets, the amount of missing data is incredibly minimal, with small gaps appearing in variables relating to a player’s birth or home state that are likely due to inconsistencies in recording older or less-documented player data. This indicates that most essential features in these subsets are complete and ready for analysis and that variables related to biographical or supplementary information notably exhibit more missingness compared to performance metrics. Overall, the data subsets are largely complete, with the missing data unlikely to significantly impact the analysis.\n\n\nCode\nbat_stats_df &lt;- fread('bat_stats_subset.csv')\n\nbat_stats_uniform &lt;- bat_stats_df |&gt;\n  mutate(across(everything(), as.character))\n\nmissing_bat_stats &lt;- bat_stats_uniform |&gt;\n  mutate(row_id = row_number()) |&gt; \n  pivot_longer(-row_id, names_to = \"variable\", values_to = \"value\") |&gt; \n  mutate(missing = is.na(value)) \n\nggplot(missing_bat_stats, aes(x = variable, y = row_id, fill = missing)) +\n  geom_tile() +\n  scale_fill_manual(values = c(\"FALSE\" = \"white\", \"TRUE\" = \"red\"), name = \"Missing\") +\n  theme_minimal() +\n  labs(\n    title = \"Heatmap of Missing Values in Batting Statistics Subset\",\n    x = \"Variables\",\n    y = \"Rows\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\npitch_stats_df &lt;- fread('pitch_stats_subset.csv')\n\npitch_stats_uniform &lt;- pitch_stats_df |&gt;\n  mutate(across(everything(), as.character))\n\nmissing_pitch_stats &lt;- pitch_stats_uniform |&gt;\n  mutate(row_id = row_number()) |&gt; \n  pivot_longer(-row_id, names_to = \"variable\", values_to = \"value\") |&gt; \n  mutate(missing = is.na(value)) \n\nggplot(missing_pitch_stats, aes(x = variable, y = row_id, fill = missing)) +\n  geom_tile() +\n  scale_fill_manual(values = c(\"FALSE\" = \"white\", \"TRUE\" = \"red\"), name = \"Missing\") +\n  theme_minimal() +\n  labs(\n    title = \"Heatmap of Missing Values in Pitching Statistics Subset\",\n    x = \"Variables\",\n    y = \"Rows\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\nbat_draft_df &lt;- fread('bat_draft_subset.csv')\n\nbat_draft_uniform &lt;- bat_draft_df |&gt;\n  mutate(across(everything(), as.character))\n\nmissing_bat_draft &lt;- bat_draft_uniform |&gt;\n  mutate(row_id = row_number()) |&gt; \n  pivot_longer(-row_id, names_to = \"variable\", values_to = \"value\") |&gt; \n  mutate(missing = is.na(value)) \n\nggplot(missing_bat_draft, aes(x = variable, y = row_id, fill = missing)) +\n  geom_tile() +\n  scale_fill_manual(values = c(\"FALSE\" = \"white\", \"TRUE\" = \"red\"), name = \"Missing\") +\n  theme_minimal() +\n  labs(\n    title = \"Heatmap of Missing Values in Batting Draft Subset\",\n    x = \"Variables\",\n    y = \"Rows\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\npitch_draft_df &lt;- fread('pitch_draft_subset.csv')\n\npitch_draft_uniform &lt;- pitch_draft_df |&gt;\n  mutate(across(everything(), as.character))\n\nmissing_pitch_draft &lt;- pitch_draft_uniform |&gt;\n  mutate(row_id = row_number()) |&gt; \n  pivot_longer(-row_id, names_to = \"variable\", values_to = \"value\") |&gt; \n  mutate(missing = is.na(value)) \n\nggplot(missing_pitch_draft, aes(x = variable, y = row_id, fill = missing)) +\n  geom_tile() +\n  scale_fill_manual(values = c(\"FALSE\" = \"white\", \"TRUE\" = \"red\"), name = \"Missing\") +\n  theme_minimal() +\n  labs(\n    title = \"Heatmap of Missing Values in Pitching Draft Subset\",\n    x = \"Variables\",\n    y = \"Rows\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_blank()\n  )",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "3.1 Relationship Between Drafting High School and College Level Players\nWe made a stacked bar chart that displayed the percentage of draftees by round, with colors indicating high school status at the time of drafting, in order to examine the relationship between draft round and high school status. This stacked bar chart analysis shows that a much less number of high school athletes are selected as the first ten rounds go.\nCode\nlibrary(tidyverse)\nlibrary(data.table)\n\ndraft_info &lt;- fread('clean_draft.csv')\ndraft_info &lt;- \n  draft_info |&gt; \n  mutate(mlb_years = ifelse(mlb_played_first == 0 & mlb_played_last == 0, 0,\n                            (mlb_played_last - mlb_played_first) + 1 ) )\n\n# Create a dataframe with state naming data\nstate_data &lt;- data.frame(names = state.name, abbreviation = tolower(state.abb))\n\ndraft_info &lt;- \n  draft_info |&gt;\n  left_join(state_data, by = c(\"home_state\" = \"abbreviation\")) |&gt;\n  select(-home_state) |&gt;\n  rename(home_state = names) |&gt; \n  drop_na(home_state)\n\nplayers_per_round &lt;- \n  draft_info |&gt; \n  filter(as.integer(pick_round) %in% c(1:10)) |&gt; \n  drop_na(high_school) |&gt; \n  group_by(pick_round) |&gt; \n  summarise(drafted_players = n()) |&gt; \n  ungroup() |&gt; \n  mutate(pick_round = factor(pick_round, levels = c(1:10))) |&gt; \n  arrange(pick_round)\n\n# Subset the data to only players drafted in the first 10 rounds\nfirst_10 &lt;- \n  draft_info |&gt; \n  filter(as.integer(pick_round) %in% c(1:10)) |&gt; \n  drop_na(high_school) |&gt; \n  group_by(pick_round, high_school) |&gt; \n  summarise(num_players = n()) |&gt; \n  arrange(desc(num_players)) |&gt; \n  ungroup() |&gt; \n  inner_join(players_per_round, by = \"pick_round\") |&gt; \n  mutate(pick_round = factor(pick_round, levels = c(1:10)),\n         high_school = as.factor(ifelse(high_school == \"Yes\", \"High School\", \n                                        \"College\") ),\n         percent = round(num_players / drafted_players * 100, 2)  )|&gt; \n  arrange(pick_round)\n\nhs_by_round_plot &lt;-\n  ggplot(first_10, aes(x = pick_round, y = percent, fill = high_school)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  labs(y = \"Percent of Draftees\", x = \"Draft Round\", \n       title = \"Percent of Draftees by Round and School Level\",\n       fill = \"School Level\") +\n  theme_minimal() +\n  geom_text(aes(label = paste(percent, \"%\", sep = \"\")), \n                position = position_stack(vjust = 0.5), size = 4) +\n  theme(plot.title = element_text(size = 12, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 10))\nhs_by_round_plot",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#how-long-to-play-first-mlb-game",
    "href": "results.html#how-long-to-play-first-mlb-game",
    "title": "3  Results",
    "section": "3.2 How Long to Play First MLB Game",
    "text": "3.2 How Long to Play First MLB Game\nThrough using histograms, we determined the number of years between a player’s first MLB game and the year of their draft in order to examine the number of years prior to a batting or pitching draftee playing their first MLB game. The number of years it takes for a batting draftee to play in Major League Baseball is comparable to that of a pitching draftee, according to an analysis of these two histograms. The majority of players in both datasets play their first game three to five years after being drafted, making them slightly tilted to the right.\n\n\nCode\nlibrary(gridExtra)\n\nbat_stats_df &lt;- fread('bat_stats_subset.csv')\npitch_stats_df &lt;- fread('pitch_stats_subset.csv')\n\n# Created a new variable for each dataset that gives number of years it took \n# player to play their first MLB game\nbat_stats_df$DifferenceYearsDraftFGPlayed &lt;- bat_stats_df$mlb_played_first - bat_stats_df$year\npitch_stats_df$DifferenceYearsDraftFGPlayed &lt;- pitch_stats_df$mlb_played_first - pitch_stats_df$year\n\nplot1 &lt;- ggplot(bat_stats_df, aes(x = DifferenceYearsDraftFGPlayed)) +\n  geom_histogram(binwidth = 0.5, fill = \"deepskyblue\", color = \"black\", alpha = 0.8) +\n  labs(title = \"Years for Batting Draftee to Play First MLB Game\", \n       x = \"# of Years\", y = \"Frequency\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 12, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 10))\n\nplot2 &lt;- ggplot(pitch_stats_df, aes(x = DifferenceYearsDraftFGPlayed)) +\n  geom_histogram(binwidth = 0.5, fill = \"orange\", color = \"black\", alpha = 0.8) +\n  labs(title = \"Years for Pitching Draftee to Play First MLB Game\", \n       x = \"# of Years\", y = \"Frequency\") + \n  theme_minimal() +\n  theme(plot.title = element_text(size = 12, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 10))\ngrid.arrange(plot1, plot2, nrow = 1)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#weight-vs-height",
    "href": "results.html#weight-vs-height",
    "title": "3  Results",
    "section": "3.3 Weight vs Height",
    "text": "3.3 Weight vs Height\nAdditionally, we looked into the correlation between height and weight for both batting and pitching draftees. In addition to mapping the features of each individual, we also plotted the mean weigh and height and carried out a basic linear regression to ascertain the general trend by generating a scatterplot of the two datasets. The mean weight for batting draftees is marginally lower than the mean weight for pitching draftees, as can be seen when comparing these two plots. Similarly, batting draftees’ average height is little lower than that of their pitching counterparts. Compared to the average pitching draftee, the average batting draftee should be a little shorter and lighter.\n\n\nCode\nplot1 &lt;- ggplot(bat_stats_df, aes(x = person_weight, y=person_height)) +\n  geom_point(fill=\"deepskyblue\", shape=21, size=2, alpha = 0.8) +\n  geom_hline(yintercept = mean(bat_stats_df$person_height,na.rm=T), \n             color = \"red\", linetype = \"dashed\", alpha = 0.8) + \n  geom_vline(xintercept = mean(bat_stats_df$person_weight,na.rm=T), \n             color = \"blue\", linetype = \"dashed\", alpha = 0.8) +\n  geom_text(aes(x = mean(bat_stats_df$person_weight,na.rm=T), \n                y = mean(bat_stats_df$person_height,na.rm=T) - 1, \n                label = paste(\"Mean Height\")), \n            color = \"red\", hjust = -3, vjust = 0, alpha = 0.8) + \n  geom_text(aes(x = mean(bat_stats_df$person_weight,na.rm=T) + 1, \n                y = mean(bat_stats_df$person_height,na.rm=T), \n                label = paste(\"Mean Weight\")), \n            color = \"blue\", hjust = 0, vjust = -15, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\", alpha = 0.8) +\n  labs(title = \"Weight vs. Height (Batters)\", \n       x = \"Draftee Weight\", y = \"Draftee Height\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 12, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 10))\n\nplot2 &lt;- ggplot(pitch_stats_df, aes(x = person_weight, y=person_height)) +\n  geom_point(fill=\"orange\", shape=21, size=2, alpha = 0.8) +\n  geom_hline(yintercept = mean(pitch_stats_df$person_height,na.rm=T), \n             color = \"red\", linetype = \"dashed\", alpha = 0.8) + \n  geom_vline(xintercept = mean(pitch_stats_df$person_weight,na.rm=T), \n             color = \"blue\", linetype = \"dashed\", alpha = 0.8) +\n  geom_text(aes(x = mean(pitch_stats_df$person_weight,na.rm=T), \n                y = mean(pitch_stats_df$person_height,na.rm=T) - 1, \n                label = paste(\"Mean Height\")), \n            color = \"red\", hjust = -2.8, vjust = 0, alpha = 0.8) +  \n  geom_text(aes(x = mean(pitch_stats_df$person_weight,na.rm=T) + 1, \n                y = mean(pitch_stats_df$person_height,na.rm=T), \n                label = paste(\"Mean Weight\")), \n            color = \"blue\", hjust = 0, vjust = -16, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\", alpha = 0.8) +\n  labs(title = \"Weight vs. Height (Pitchers)\", \n       x = \"Draftee Weight\", y = \"Draftee Height\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 12, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 10))\n\ngrid.arrange(plot1, plot2, nrow = 1)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#correlation-heatmap",
    "href": "results.html#correlation-heatmap",
    "title": "3  Results",
    "section": "3.4 Correlation Heatmap",
    "text": "3.4 Correlation Heatmap\nFor both player categories, the following association exists between pick round, year, height, weight, and WAR: As anticipated, a person’s height and weight are strongly correlated. There is a slight positive association between a player’s height and WAR while they are pitching, but a negative correlation when they are batting. We find that the weight of a batting draftee and WAR do not correlate, but for a pitching draftee, there is a little positive correlation.\n\n\nCode\nlibrary(corrplot)\n\npar(mfrow=c(1,2))\n\nbat_stats_df1 &lt;- bat_stats_df |&gt;\n  mutate(pick_round=as.numeric(pick_round)) |&gt;\n  drop_na()\ncorrelation_matrix &lt;- cor(bat_stats_df1[, c(4,5,7,9,10)]) \ncorrplot(correlation_matrix, method = \"color\")\ntitle(\"Correlation Plot (Batting)\", line = 3,adj=0)\n\npitch_stats_df1 &lt;- pitch_stats_df |&gt;\n  mutate(pick_round=as.numeric(pick_round)) |&gt;\n  drop_na()\ncorrelation_matrix &lt;- cor(pitch_stats_df1[, c(4,5,7,9,10)]) \ncorrplot(correlation_matrix, method = \"color\")\ntitle(\"Correlation Plot (Pitching)\", line = 3,adj=0)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#state-frequency-map",
    "href": "results.html#state-frequency-map",
    "title": "3  Results",
    "section": "3.5 State Frequency Map",
    "text": "3.5 State Frequency Map\nWe create a frequency heatmap to examine which state generates the most number of draftees: The majority of athletes selected come originally from California, with Texas and Florida being the other two main home states, according to our state map. We can blame this tendency on the weather since, in contrast to the East, Midwest, and Northwest, these states often have warmer temperatures and little to no snow, allowing people to play baseball year-round and giving youth leagues more seasonal flexibility. Additionally, these states have sizable populations, which may help to explain why the majority of draftees come from them.\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(maps)\n\n# State frequency data\nstate_freq &lt;- table(draft_info$home_state)\n\n# State mapping \nstate_map &lt;- data.frame(\n  abbrev = c(\"al\", \"ak\", \"az\", \"ar\", \"ca\", \"co\", \"ct\", \"de\", \"fl\", \"ga\", \n             \"hi\", \"id\", \"il\", \"in\", \"ia\", \"ks\", \"ky\", \"la\", \"me\", \"md\", \n             \"ma\", \"mi\", \"mn\", \"ms\", \"mo\", \"mt\", \"ne\", \"nv\", \"nh\", \"nj\", \n             \"nm\", \"ny\", \"nc\", \"nd\", \"oh\", \"ok\", \"or\", \"pa\", \"ri\", \"sc\", \n             \"sd\", \"tn\", \"tx\", \"ut\", \"vt\", \"va\", \"wa\", \"wv\", \"wi\", \"wy\"),\n  full = c(\"alabama\", \"alaska\", \"arizona\", \"arkansas\", \"california\", \"colorado\", \n           \"connecticut\", \"delaware\", \"florida\", \"georgia\", \"hawaii\", \"idaho\", \n           \"illinois\", \"indiana\", \"iowa\", \"kansas\", \"kentucky\", \"louisiana\", \n           \"maine\", \"maryland\", \"massachusetts\", \"michigan\", \"minnesota\", \n           \"mississippi\", \"missouri\", \"montana\", \"nebraska\", \"nevada\", \n           \"new hampshire\", \"new jersey\", \"new mexico\", \"new york\", \n           \"north carolina\", \"north dakota\", \"ohio\", \"oklahoma\", \"oregon\", \n           \"pennsylvania\", \"rhode island\", \"south carolina\", \"south dakota\", \n           \"tennessee\", \"texas\", \"utah\", \"vermont\", \"virginia\", \"washington\", \n           \"west virginia\", \"wisconsin\", \"wyoming\")\n)\n\n# Convert abbreviations to full state names\nstate_freq_df &lt;- data.frame(region = tolower(names(state_freq)),\n                            frequency = as.numeric(state_freq)) |&gt;\n  left_join(state_map, by = c(\"region\" = \"abbrev\")) |&gt;\n  mutate(region = ifelse(is.na(full), region, full)) |&gt;\n  filter(!(region %in% c(\"hawaii\", \"alaska\"))) \n\n# U.S. map data\nstates &lt;- map_data(\"state\")\n\nmap.df &lt;- \n  merge(states, state_freq_df, by = \"region\", all.x = TRUE) |&gt;\n  arrange(order)\n\nmap.df$frequency[is.na(map.df$frequency)] &lt;- 0\n\nhome_heat_map &lt;- \n  ggplot(map.df, aes(x = long, y = lat, group = group)) +\n  geom_polygon(aes(fill = frequency)) +\n  geom_path(color = \"black\", size = 0.1) +\n  scale_fill_gradient(low = \"white\", high = \"darkred\", name = \"Players Drafted\") +\n  labs(title = \"Heat Map of Drafted Players\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 10))\nhome_heat_map",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#relationship-between-time-played-in-mlb-vs.-war",
    "href": "results.html#relationship-between-time-played-in-mlb-vs.-war",
    "title": "3  Results",
    "section": "3.6 Relationship between Time Played in MLB vs. WAR",
    "text": "3.6 Relationship between Time Played in MLB vs. WAR\nWe create the following scatterplot to investigate the relationship between a player’s career length and WAR: The duration of a player’s career does not always translate into a high WAR, as seen by the comparison of each player’s total MLB time played and WAR. There does appear to be an upward trend, though, which makes logical given that we anticipate a player to win more the longer they play.\n\n\nCode\nplayers &lt;- bind_rows(bat_stats_df, pitch_stats_df) |&gt;\n  arrange(desc(fWAR)) |&gt; \n  distinct(person_id, .keep_all = T)\n\nplayers$time_played &lt;- (players$mlb_played_last - players$mlb_played_first) + 1\n\nggplot(players, aes(x = time_played, y=fWAR)) +\n  geom_point(fill=\"white\", shape=21, size=2, alpha = 0.8) +\n  geom_hline(yintercept = mean(players$fWAR,na.rm=T), \n             color = \"red\", linetype = \"dashed\", alpha = 0.8) + \n  geom_vline(xintercept = mean(players$time_played,na.rm=T), \n             color = \"blue\", linetype = \"dashed\", alpha = 0.8) +\n  geom_text(aes(x = mean(players$time_played,na.rm=T)+8, \n                y = mean(players$fWAR,na.rm=T)+5, \n                label = paste(\"Mean WAR\")), \n            color = \"red\", hjust = -4, vjust = 0, alpha = 0.8) +\n  geom_text(aes(x = mean(players$time_played,na.rm=T)+0.5, \n                y = mean(players$fWAR,na.rm=T)+40, \n                label = paste(\"Mean Time\")), \n            color = \"blue\", hjust = 0, vjust = -10, alpha = 0.8) +  \n  labs(title = \"Total Time in MLB vs. WAR\", \n       x = \"Total Time Played in MLB\", y = \"Wins Above Replacement\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 12, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 10))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#how-often-do-player-draftees-make-the-mlb",
    "href": "results.html#how-often-do-player-draftees-make-the-mlb",
    "title": "3  Results",
    "section": "3.7 How often do Player Draftees make the MLB?",
    "text": "3.7 How often do Player Draftees make the MLB?\nThe majority of players miss the major leagues, and only 13.06% of draftees actually get the chance to play, according to the pie chart showing whether or not they eventually made it to the MLB. We shall pay particular attention to the players who qualified for the Major Leagues.\n\n\nCode\ndraft_info &lt;- fread('draft_data.csv') |&gt; \n  mutate(mlb_played_first = year(person_mlb_debut_date),\n         high_school = ifelse(str_detect(school_name, \"\\\\sHS\") == TRUE, \"Yes\", \n                              \"No\"),\n         person_height = str_replace_all(person_height, \"\\\"$\", \"\")) |&gt; \n  replace_na(list(home_state = \"None\", mlb_played_first = 0)) |&gt; \n  mutate(mlb_played_last = ifelse(mlb_played_first == 0, 0, \n                           year(person_last_played_date)),\n         made_mlb = ifelse(mlb_played_first == 0, 0, 1)) |&gt; \n  replace_na(list(mlb_played_last = 2023)) |&gt; \n  # Remove variables of no interest\n  select(-person_link, -c(person_use_name:person_gender),\n         -c(person_name_slug:person_init_last_name), \n         -c(person_name_matrilineal:home_city), -c(home_country, school_state),\n         -c(person_xref_ids:person_death_country), -person_name_title, -team_id,\n         -person_name_suffix, -c(team_link:team_spring_league_abbreviation), \n         -headshot_link, home_state)\n\nmlb_info &lt;- \n  draft_info |&gt; \n  mutate(pick_round = as.numeric(pick_round)) |&gt; \n  filter(pick_round %in% c(1:100)) |&gt; \n  group_by(person_id) |&gt; \n  dplyr::slice(which.max(year)) |&gt; \n  ungroup() |&gt; \n  summarise(`Drafted` = n(), \n            `Made MLB` = sum(made_mlb), \n            `% Made MLB` = round((`Made MLB` / `Drafted`) * 100, 2),\n            `% Missed MLB` = round((100 - `% Made MLB`), 2))\n\nmlb_info_long &lt;- \n  mlb_info |&gt; \n  pivot_longer(cols = c(`Made MLB`, `Drafted`), names_to = \"Category\", values_to = \"Total Players\")\n\npie_chart &lt;-\n  ggplot(data = mlb_info_long, aes(x = \"\", y = `Total Players`, fill = Category)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(\"y\", start = 0) +\n  theme_void() +\n  labs(title = \"Pie Chart of MLB Status\") + \n  geom_text(aes(label = c(paste(mlb_info$`% Made MLB`, \"%\", sep = \"\"), \n                          paste(mlb_info$`% Missed MLB`, \"%\", sep = \"\")), \n                hjust = 0.75, vjust = -1), size = 5.3) +\n  theme(plot.title = element_text(size = 12, face = \"bold\"),\n        legend.title = element_text(size = 12, face = \"bold\"),\n        legend.text = element_text(size = 12))\n\npie_chart",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#best-draft-class-through-all-the-mlb-years",
    "href": "results.html#best-draft-class-through-all-the-mlb-years",
    "title": "3  Results",
    "section": "3.8 Best Draft Class Through all the MLB Years",
    "text": "3.8 Best Draft Class Through all the MLB Years\nWe can see from the barplot that the 1965, 1985, and 2002 draft classes are highly successful with each garnering a WAR value of over 900 across the draft class. 1965 includes the likes of Johnny Bench, Nolan Ryan, and Tom Seaver. Meanwhile 1985 includes Barry Bonds, John Smoltz, and Randy Johnson. 2002 includes Zack Greinke, Prince Fielder, and Cole Hamels. The thing these drafts share in common is that they have an abundance of talent, both in terms of Hall of Famers and depth\n\n\nCode\nbat_draft_df &lt;- fread('bat_draft_subset.csv')\npitch_draft_df &lt;- fread('pitch_draft_subset.csv')\n\nplayers &lt;- \n  bind_rows(pitch_draft_df, bat_draft_df) |&gt;\n  mutate(pick_round = as.numeric(pick_round)) |&gt;\n  filter(pick_round %in% c(1:100)) |&gt;\n  group_by(person_id) |&gt; \n  # Choose the player's most recent draft year (if drafted more than once)\n  dplyr::slice(which.max(year)) |&gt;\n  ungroup() |&gt;\n  mutate(less_five_war = ifelse(fWAR &lt; 5, 1, 0),\n         five_to_10 = ifelse(fWAR &gt;= 5 & fWAR &lt; 10, 1, 0),\n         ten_to_15 = ifelse(fWAR &gt;= 10 & fWAR &lt; 15, 1, 0),\n         fifteen_to_20 = ifelse(fWAR &gt;= 15 & fWAR &lt; 20, 1, 0),\n         twenty_to_25 = ifelse(fWAR &gt;= 20 & fWAR &lt;= 25, 1, 0),\n         more_than_25 = ifelse(fWAR &gt; 25, 1, 0),\n         yrs_before_debut = mlb_played_first - year,\n         time_played = (mlb_played_last - mlb_played_first) + 1,\n         debut_age = mlb_played_first - birth_year,\n         draft_age = debut_age - yrs_before_debut) |&gt;\n  arrange(desc(fWAR))\n\ntotal_war_by_year &lt;- \n  players |&gt; \n  group_by(year) |&gt; \n  summarise(total_WAR = sum(fWAR)) |&gt; \n  arrange(desc(total_WAR)) |&gt; \n  mutate(rank = c(1:59) )\n\nwar_levels &lt;- \n  total_war_by_year |&gt; \n  slice_head(n = 10) |&gt; \n  select(year) |&gt;  \n  unlist() |&gt;\n  as.character()\n\n# Plot of top 10 draft classes by total WAR\ndraft_class_war &lt;-\n  ggplot(total_war_by_year |&gt; \n         slice_head(n = 10), \n       aes(x = factor(rank, levels = c(1:10), labels = war_levels), \n           y = total_WAR\n           )\n       ) + \n  geom_bar(stat = \"identity\", fill = \"deepskyblue\") +\n  labs(x = \"Draft Class\", y = \"Total WAR\", \n       title = \"Top 10 Draft Classes by Total WAR\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 12),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 10)) +\n  geom_text(aes(label = total_WAR, vjust = -0.5))\n\ndraft_class_war",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#most-successful-positions",
    "href": "results.html#most-successful-positions",
    "title": "3  Results",
    "section": "3.9 Most Successful Positions",
    "text": "3.9 Most Successful Positions\nWe can observe that outfielders (CF or LF), first basemen (1B), and third basemen (3B) have frequently been the most successful positions when investigating the WAR values of positions in a given draft class. This can be explained by the high level fielding positions of outfield and third base, as well as the game-changing power hitting of first basemen.\n\n\nCode\ntotal_war_by_pos_and_year &lt;- \n  players |&gt;\n  filter(person_primary_position_abbreviation != \"P\") |&gt;\n  group_by(year, person_primary_position_abbreviation) |&gt;\n  summarise(total_WAR = sum(fWAR)) |&gt;\n  arrange(desc(total_WAR)) |&gt;\n  ungroup() |&gt;\n  mutate(label = paste(year, person_primary_position_abbreviation, sep = \"/\"),\n         rank = seq_len(n()))\n\npos_class_labels &lt;- \n  total_war_by_pos_and_year|&gt;\n  slice_head(n = 10) |&gt;\n  select(label) |&gt;\n  unlist() |&gt;\n  as.character()\n\n# Barplot of total top 10 total WAR Draft Class/Position Combination\npos_class_war &lt;- \n  ggplot(total_war_by_pos_and_year |&gt;\n         slice_head(n = 10), \n       aes(x = factor(rank, levels = c(1:10), labels = pos_class_labels), \n           y = total_WAR\n           )\n       ) + \n  geom_bar(stat = \"identity\", fill = \"orange\") +\n  labs(x = \"Draft Class/Position\", y = \"Total WAR\", \n       title = \"Top 10 Position Classes by Total WAR\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 12),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 10)) +\n  geom_text(aes(label = total_WAR, vjust = -0.5))\n\npos_class_war",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#age-vs-war",
    "href": "results.html#age-vs-war",
    "title": "3  Results",
    "section": "3.10 Age vs WAR",
    "text": "3.10 Age vs WAR\nThis scatter plot investigates the connection between a player’s career WAR (Wins Above Replacement) and their age at draft time. Younger players (e.g., 18 or 19 years old) who are drafted show a variety of WAR values, including very high accomplishments. On the other hand, athletes who are drafted later in life (e.g., 22 years of age or beyond) typically cluster around lower WAR values, suggesting less variability and a lower chance of reaching high lifetime WAR. This implies that while older draftees typically have more predictable results, picking younger athletes carries more risks but also the potential for bigger rewards.\n\n\nCode\ndraft_age_war &lt;- \n  players |&gt; \n  filter(!is.na(draft_age)) |&gt; \n  arrange(desc(fWAR))\n\ndraft_age_plot &lt;- \n  ggplot(draft_age_war, aes(x = draft_age, y = fWAR)) +\n  geom_point(alpha = 0.6, size = 2, color = \"deepskyblue\") +\n  geom_smooth(method = \"lm\", color = \"red\", se = TRUE, alpha = 0.3) +\n  labs(title = \"Draft Age vs WAR\",\n       x = \"Draft Age\",\n       y = \"Wins Above Replacement (WAR)\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10),\n        legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 10))\n\ndraft_age_plot",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "d3graph.html",
    "href": "d3graph.html",
    "title": "4  Interactive Components in D3",
    "section": "",
    "text": "4.1 MLB Draft Picks: Pitching and Batting WAR Analysis",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Interactive Components in D3</span>"
    ]
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "5  Conclusion",
    "section": "",
    "text": "The preference for selecting high school baseball players over collegiate ones is the first of these biases. Generally speaking, organizations are more cautious when selecting high school players unless they are exceptional, which is why college players are picked more frequently. The fact that more high school athletes are selected in rounds 1 through 5 than in any other part of the draft serves as an example of this. This lends credence to the notion that high school athletes are being selected at a very early stage of the draft and are considered elite.\nThe draft bias for athletes based on their home state was another element we were able to uncover. Although all states have sizable populations, it should come as no surprise that gamers were most often from major states like California, Texas, and Florida. In addition, there was a preference for players from warmer temperature states, such those in the west and the south. Teams would probably be reluctant to select players from underrepresented states like Wyoming or Vermont because of the smaller talent pool and the uncertainty surrounding the players’ past performance.\nWe were able to ascertain from our statistical data regarding draft prospects who made it to the Major Leagues that players who play high leverage positions are more likely to succeed in their careers by using our success metric, fWAR. Left field (LF), center field (CF), and third base (3B) are some of these positions. These players make significant contributions to the game in both their batting and fielding roles. These players can contribute at most game levels and are typically strong players overall. First base (1B) was the other position that stood out, but first basemen don’t usually make a significant contribution on the defensive end of the ball. Although they typically have less fielding responsibilities, first basemen are among the finest hitters overall. Home runs and runs batted in are two of the most valuable contributors to value in terms of fWAR, and first basemen are renowned for being exceptional power hitters.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conclusion</span>"
    ]
  },
  {
    "objectID": "d3graph.html#interactive-d3.js-baseball-graphs",
    "href": "d3graph.html#interactive-d3.js-baseball-graphs",
    "title": "4  Interactive Component in D3",
    "section": "",
    "text": "4.1.1 Batting Stats\n\n\n\n\n\n4.1.2 Pitching Stats",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Interactive Component in D3</span>"
    ]
  },
  {
    "objectID": "d3graph.html#mlb-draft-picks-pitching-and-batting-war-analysis",
    "href": "d3graph.html#mlb-draft-picks-pitching-and-batting-war-analysis",
    "title": "4  Interactive Components in D3",
    "section": "",
    "text": "4.1.1 Batting Statistics\n\n\n\n\n\n4.1.2 Pitching Statistics",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Interactive Components in D3</span>"
    ]
  }
]